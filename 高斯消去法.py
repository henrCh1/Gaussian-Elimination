# -*- coding: utf-8 -*-
"""
Created on Fri Mar 31 14:04:24 2023

@author: 86319
"""

'''
该代码实现了高斯消元法（Gaussian Elimination）求解线性方程组的过程，主要包括两个步骤：
高斯消元和回代。其中，高斯消元的过程是将方程组化为上三角矩阵的过程，
而回代则是通过从最后一个未知数开始，逐步求解出每一个未知数的过程。
函数接收两个参数，分别为系数矩阵 A 和方程组右端的向量 b。
在函数内部，首先获取系数矩阵的行数 n，然后进行高斯消元的操作。
高斯消元的过程是通过遍历系数矩阵的每一列，将当前列的下方元素消为 0，从而将系数矩阵化为上三角矩阵。
在每一步操作中，需要计算当前需要消元的位置的乘数 factor，并对系数矩阵和方程组右端进行相应的操作。
高斯消元的过程完成后，接下来进行回代操作。
回代的过程是通过从最后一个未知数开始，逐步求解出每一个未知数的过程。
在每一步操作中，需要使用已知的解来求解当前未知数。
最后，函数返回解向量 x，并输出结果
。在该示例中，使用了一个示例矩阵和方程组右端，求解出了该线性方程组的解。
'''

import numpy as np

def gauss_elimination(A, b):
    n = len(b)  # 系数矩阵的行数

    # Gaussian elimination（高斯消元）
    for i in range(n-1):  # 对每一列进行操作，最后一列不用处理
        for j in range(i+1, n):  # 操作范围为当前列的下方
            factor = float(A[j,i]) / A[i,i]  # 计算当前需要消元的位置的乘数
            A[j,i+1:] = A[j,i+1:] - factor * A[i,i+1:]  # 消元操作
            b[j] = b[j] - factor * b[i]  # 也要对方程组右端进行操作
    
    # Back substitution（回代）
    x = np.zeros(n)  # 解向量
    for i in range(n-1, -1, -1):  # 从最后一行开始往前
        x[i] = (b[i] - np.dot(A[i,i+1:], x[i+1:])) / A[i,i]  # 回代求解出当前未知数
    
    return x

# 示例矩阵
A = np.array([[-1, 2, -2], [3, -1, 4], [2, -3, -2]])
b = np.array([-1, 7, 0])

# 调用高斯消元函数并输出结果
x = gauss_elimination(A, b)
print("Solution: ", x)

